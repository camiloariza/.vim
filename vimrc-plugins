set nocompatible
filetype plugin on
syntax on

call plug#begin('~/.vim/plugged')

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Plug 'lervag/vimtex'
let g:vimtex_view_method = 'mupdf'
let g:vimtex_view_mupdf_send_keys = 'i'
let g:vimtex_format_enabled = 1
let g:vimtex_toc_config = { 'mode' : 1,
			\   'refresh_always' : 0,
			\   'split_pos' : 'vert belowright',
			\   'show_help' : 0,
                        \ }
let g:vimtex_compiler_latexmk = { 'backend' : 'jobs',
                              \   'background' : 1,
                              \   'build_dir' : '',
                              \   'callback' : 1,
                              \   'continuous' : 0,
                              \   'executable' : 'latexmk',
                              \   'options' : [
                              \     '-verbose',
                              \     '-file-line-error',
                              \     '-synctex=1',
                              \     '-interaction=nonstopmode',
                              \   ],
                              \  }

au BufRead,BufNewFile *.tikz    set filetype=tex

augroup vimtex
    autocmd!
    autocmd BufWritePost *.tex call vimtex#toc#refresh()
augroup END

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Plug 'vim-syntastic/syntastic'
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Plug 'flazz/vim-colorschemes'

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Plug 'tpope/vim-commentary'

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'

let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"
let g:UltiSnipsEditSplit="vertical"

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plug 'airblade/vim-gitgutter'
Plug 'mhinz/vim-signify'

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
call plug#end()

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" editor
if has("gui_running")
    set guioptions=i
endif

colorscheme afterglow
set cursorline
set number
set relativenumber
set noswapfile
set mouse=a
set hlsearch
set encoding=utf-8
set path=**
set wildmenu
set smartindent
set nowrap
set ttymouse=sgr
set tabstop=4

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" textwidth
set colorcolumn=80
set textwidth=80
set formatoptions=tc

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" spell
set spell
set spelllang=en_us

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" tabs
set expandtab
set shiftwidth=4
set softtabstop=4

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" trailing spaces
autocmd BufWritePre * %s/\s\+$//e
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" file explorer
let g:netrw_banner = 0
let g:netrw_liststyle = 0
let g:netrw_browse_split = 4
let g:netrw_altv = 1
let g:netrw_winsize = 25
let g:netrw_keepdir = 0
let g:netrw_list_hide= '\(^\|\s\s\)\zs\.\S\+'

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" jump to the last position when reopening a file
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif
