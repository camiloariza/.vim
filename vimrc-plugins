source ~/.vim/vimrc-base

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" vim-plug auto install
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
call plug#begin('~/.vim/plugged')

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Plug 'tpope/vim-fugitive'

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Plug 'itchyny/lightline.vim'

" add branch name to statusline (depends on vim-fugitive)
let g:lightline = { 'colorscheme': 'wombat',
                \   'active': {
                \     'left': [
                \       ['mode', 'paste' ],
                \       ['gitbranch', 'readonly', 'filename', 'modified']
                \     ]
                \   },
                \   'component_function': {
                \     'gitbranch': 'fugitive#head'
                \   },
                \ }

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Plug 'lervag/vimtex'
let g:vimtex_view_method = 'mupdf'
let g:vimtex_format_enabled = 1
let g:vimtex_fold_manual = 1
let g:vimtex_toc_config = { 'mode' : 1,
                        \   'refresh_always' : 0,
                        \   'split_pos' : 'vert belowright',
                        \   'show_help' : 0,
                        \   'tocdepth': 1,
                        \ }
let g:vimtex_compiler_latexmk = { 'backend' : 'jobs',
                              \   'background' : 1,
                              \   'build_dir' : '',
                              \   'callback' : 1,
                              \   'continuous' : 0,
                              \   'executable' : 'latexmk',
                              \   'options' : [
                              \     '-verbose',
                              \     '-file-line-error',
                              \     '-synctex=1',
                              \     '-interaction=nonstopmode',
                              \   ],
                              \  }

augroup vimtex
    " fecth bibtex from doi.org
    fu! s:getbib(doi)
        execute 'read ! curl -s --location'
                    \ '--header "Accept: application/x-bibtex" '
                    \ 'http://www.doi.org/' . a:doi
    endfu

    command! -nargs=* -bar -bang -complete=customlist,s:names GetBib
                \ call s:getbib(<f-args>)
augroup END

autocmd BufReadPost *.tikz set ft=tex

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Plug 'vim-syntastic/syntastic'
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Plug 'flazz/vim-colorschemes'

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Plug 'scrooloose/nerdcommenter'
let g:NERDSpaceDelims = 1
let g:NERDCompactSexyComs = 1
let g:NERDDefaultAlign = 'left'
let g:NERDCommentEmptyLines = 1
let g:NERDTrimTrailingWhitespace = 1
let g:NERDToggleCheckAllLines = 1
map <C-_> <plug>NERDCommenterToggle
vmap <C-_> <plug>NERDCommenterToggle gv
let g:NERDCustomDelimiters = {
    \ 'python': { 'left': '#', 'leftAlt': '#' },
\ }


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'

let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"
let g:UltiSnipsEditSplit="vertical"

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Plug 'mhinz/vim-signify'

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Plug 'Yggdroot/indentLine'
let g:indentLine_char = 'â”†'
let g:indentLine_concealcursor = 'nc'
let g:indentLine_conceallevel = 2

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Plug 'camiloariza/vim-jaskeleton'
let g:jaskeleton_user = 'camilo ariza'
let g:jaskeleton_email = 'camilo.ariza@protonmail.com'

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
call plug#end()

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" options
colorscheme afterglow

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" trailing spaces
autocmd BufWritePre * %s/\s\+$//e
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()
